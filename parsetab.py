
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightNOTUMINUSAND ASSERT ASSIGN COLON_EQ DIVIDE ELSE EQ FOR GE GT IDENTIFIER IF LBRACE LE LPAREN LT MINUS MOD NE NOT NUMBER OR PLUS RBRACE RPAREN SEMICOLON TIMES VAR WHILEprogram : statementsstatements : statement\n| statement statementsstatement : var_declaration\n| assignment\n| while_loop\n| for_loop\n| if_statement\n| assert_statementvar_declaration : VAR IDENTIFIER ASSIGN expression SEMICOLON\n| VAR IDENTIFIER COLON_EQ expression SEMICOLONassignment : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER COLON_EQ expression SEMICOLONwhile_loop : WHILE LPAREN expression RPAREN LBRACE statements RBRACEfor_loop : FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE\n| FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACEif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n| IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEassert_statement : ASSERT expression SEMICOLONexpression : term\n| expression PLUS term\n| expression MINUS termterm : factor\n| term TIMES factor\n| term DIVIDE factor\n| term MOD factorfactor : primary\n| NOT primary\n| MINUS primary %prec UMINUScomparison : comparison EQ atomic\n| comparison NE atomic\n| comparison LT atomic\n| comparison GT atomic\n| comparison LE atomic\n| comparison GE atomic\n| comparison AND atomic\n| comparison OR atomic\n| atomicprimary : comparisonatomic : IDENTIFIER\n| NUMBER\n| LPAREN expression RPAREN'
    
_lr_action_items = {'VAR':([0,3,4,5,6,7,8,9,21,42,61,62,81,82,83,86,91,94,95,96,100,101,102,104,],[10,10,-4,-5,-6,-7,-8,-9,10,-19,-12,-13,-10,-11,10,10,-14,-17,10,10,10,-15,-16,-18,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,15,18,19,20,21,22,25,28,33,34,35,39,40,42,43,44,45,46,47,50,51,52,53,54,55,56,57,61,62,81,82,83,84,85,86,91,94,95,96,100,101,102,104,],[11,11,-4,-5,-6,-7,-8,-9,17,31,31,31,31,11,31,31,31,31,31,31,31,31,-19,31,31,31,31,31,31,31,31,31,31,31,31,31,-12,-13,-10,-11,11,11,11,11,-14,-17,11,11,11,-15,-16,-18,]),'WHILE':([0,3,4,5,6,7,8,9,42,61,62,81,82,83,86,91,94,95,96,100,101,102,104,],[12,12,-4,-5,-6,-7,-8,-9,-19,-12,-13,-10,-11,12,12,-14,-17,12,12,12,-15,-16,-18,]),'FOR':([0,3,4,5,6,7,8,9,42,61,62,81,82,83,86,91,94,95,96,100,101,102,104,],[13,13,-4,-5,-6,-7,-8,-9,-19,-12,-13,-10,-11,13,13,-14,-17,13,13,13,-15,-16,-18,]),'IF':([0,3,4,5,6,7,8,9,42,61,62,81,82,83,86,91,94,95,96,100,101,102,104,],[14,14,-4,-5,-6,-7,-8,-9,-19,-12,-13,-10,-11,14,14,-14,-17,14,14,14,-15,-16,-18,]),'ASSERT':([0,3,4,5,6,7,8,9,42,61,62,81,82,83,86,91,94,95,96,100,101,102,104,],[15,15,-4,-5,-6,-7,-8,-9,-19,-12,-13,-10,-11,15,15,-14,-17,15,15,15,-15,-16,-18,]),'$end':([1,2,3,4,5,6,7,8,9,16,42,61,62,81,82,91,94,101,102,104,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-3,-19,-12,-13,-10,-11,-14,-17,-15,-16,-18,]),'RBRACE':([3,4,5,6,7,8,9,16,42,61,62,81,82,87,90,91,94,98,99,101,102,103,104,],[-2,-4,-5,-6,-7,-8,-9,-3,-19,-12,-13,-10,-11,91,94,-14,-17,101,102,-15,-16,104,-18,]),'ASSIGN':([11,17,],[18,34,]),'COLON_EQ':([11,17,],[19,35,]),'LPAREN':([12,13,14,15,18,19,20,22,25,28,33,34,35,39,40,43,44,45,46,47,50,51,52,53,54,55,56,57,61,62,81,82,],[20,21,22,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-12,-13,-10,-11,]),'NOT':([15,18,19,20,22,33,34,35,39,40,43,44,45,46,47,61,62,81,82,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-12,-13,-10,-11,]),'MINUS':([15,18,19,20,22,23,24,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,58,59,60,61,62,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[25,25,25,25,25,44,-20,-23,-27,-39,-38,-40,-41,25,25,25,44,44,44,25,25,44,25,25,25,25,25,-29,-28,44,44,44,-12,-13,44,44,-21,-22,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,-10,-11,]),'NUMBER':([15,18,19,20,22,25,28,33,34,35,39,40,43,44,45,46,47,50,51,52,53,54,55,56,57,61,62,81,82,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-12,-13,-10,-11,]),'SEMICOLON':([23,24,26,27,29,30,31,32,36,37,48,49,59,60,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,],[42,-20,-23,-27,-39,-38,-40,-41,61,62,-29,-28,81,82,84,85,-21,-22,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'PLUS':([23,24,26,27,29,30,31,32,36,37,38,41,48,49,58,59,60,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,],[43,-20,-23,-27,-39,-38,-40,-41,43,43,43,43,-29,-28,43,43,43,43,43,-21,-22,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'RPAREN':([24,26,27,29,30,31,32,38,41,48,49,58,61,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,],[-20,-23,-27,-39,-38,-40,-41,63,66,-29,-28,80,-12,-13,-21,-22,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,92,93,]),'TIMES':([24,26,27,29,30,31,32,48,49,67,68,69,70,71,72,73,74,75,76,77,78,79,80,],[45,-23,-27,-39,-38,-40,-41,-29,-28,45,45,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'DIVIDE':([24,26,27,29,30,31,32,48,49,67,68,69,70,71,72,73,74,75,76,77,78,79,80,],[46,-23,-27,-39,-38,-40,-41,-29,-28,46,46,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'MOD':([24,26,27,29,30,31,32,48,49,67,68,69,70,71,72,73,74,75,76,77,78,79,80,],[47,-23,-27,-39,-38,-40,-41,-29,-28,47,47,-24,-25,-26,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'EQ':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[50,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'NE':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[51,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'LT':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[52,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'GT':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[53,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'LE':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[54,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'GE':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[55,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'AND':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[56,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'OR':([29,30,31,32,72,73,74,75,76,77,78,79,80,],[57,-38,-40,-41,-30,-31,-32,-33,-34,-35,-36,-37,-42,]),'LBRACE':([63,66,92,93,97,],[83,86,95,96,100,]),'ELSE':([94,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,83,86,95,96,100,],[2,16,87,90,98,99,103,]),'statement':([0,3,83,86,95,96,100,],[3,3,3,3,3,3,3,]),'var_declaration':([0,3,21,83,86,95,96,100,],[4,4,39,4,4,4,4,4,]),'assignment':([0,3,21,83,84,85,86,95,96,100,],[5,5,40,5,88,89,5,5,5,5,]),'while_loop':([0,3,83,86,95,96,100,],[6,6,6,6,6,6,6,]),'for_loop':([0,3,83,86,95,96,100,],[7,7,7,7,7,7,7,]),'if_statement':([0,3,83,86,95,96,100,],[8,8,8,8,8,8,8,]),'assert_statement':([0,3,83,86,95,96,100,],[9,9,9,9,9,9,9,]),'expression':([15,18,19,20,22,33,34,35,39,40,],[23,36,37,38,41,58,59,60,64,65,]),'term':([15,18,19,20,22,33,34,35,39,40,43,44,],[24,24,24,24,24,24,24,24,24,24,67,68,]),'factor':([15,18,19,20,22,33,34,35,39,40,43,44,45,46,47,],[26,26,26,26,26,26,26,26,26,26,26,26,69,70,71,]),'primary':([15,18,19,20,22,25,28,33,34,35,39,40,43,44,45,46,47,],[27,27,27,27,27,48,49,27,27,27,27,27,27,27,27,27,27,]),'comparison':([15,18,19,20,22,25,28,33,34,35,39,40,43,44,45,46,47,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'atomic':([15,18,19,20,22,25,28,33,34,35,39,40,43,44,45,46,47,50,51,52,53,54,55,56,57,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,72,73,74,75,76,77,78,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',138),
  ('statements -> statement','statements',1,'p_statements','parser.py',142),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',143),
  ('statement -> var_declaration','statement',1,'p_statement','parser.py',150),
  ('statement -> assignment','statement',1,'p_statement','parser.py',151),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',152),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',153),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',154),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',155),
  ('var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',159),
  ('var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',160),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',164),
  ('assignment -> IDENTIFIER COLON_EQ expression SEMICOLON','assignment',4,'p_assignment','parser.py',165),
  ('while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_loop',7,'p_while_loop','parser.py',169),
  ('for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE','for_loop',10,'p_for_loop','parser.py',173),
  ('for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE','for_loop',10,'p_for_loop','parser.py',174),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','parser.py',180),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','parser.py',181),
  ('assert_statement -> ASSERT expression SEMICOLON','assert_statement',3,'p_assert_statement','parser.py',188),
  ('expression -> term','expression',1,'p_expression','parser.py',192),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',193),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',194),
  ('term -> factor','term',1,'p_term','parser.py',203),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',204),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',205),
  ('term -> term MOD factor','term',3,'p_term','parser.py',206),
  ('factor -> primary','factor',1,'p_factor','parser.py',217),
  ('factor -> NOT primary','factor',2,'p_factor','parser.py',218),
  ('factor -> MINUS primary','factor',2,'p_factor','parser.py',219),
  ('comparison -> comparison EQ atomic','comparison',3,'p_comparison','parser.py',228),
  ('comparison -> comparison NE atomic','comparison',3,'p_comparison','parser.py',229),
  ('comparison -> comparison LT atomic','comparison',3,'p_comparison','parser.py',230),
  ('comparison -> comparison GT atomic','comparison',3,'p_comparison','parser.py',231),
  ('comparison -> comparison LE atomic','comparison',3,'p_comparison','parser.py',232),
  ('comparison -> comparison GE atomic','comparison',3,'p_comparison','parser.py',233),
  ('comparison -> comparison AND atomic','comparison',3,'p_comparison','parser.py',234),
  ('comparison -> comparison OR atomic','comparison',3,'p_comparison','parser.py',235),
  ('comparison -> atomic','comparison',1,'p_comparison','parser.py',236),
  ('primary -> comparison','primary',1,'p_primary','parser.py',243),
  ('atomic -> IDENTIFIER','atomic',1,'p_atomic','parser.py',247),
  ('atomic -> NUMBER','atomic',1,'p_atomic','parser.py',248),
  ('atomic -> LPAREN expression RPAREN','atomic',3,'p_atomic','parser.py',249),
]
